body file control
{
      namespace => "nickanderson";
}
bundle agent _inventory_sudoers_main
# @brief Inventory users sudo access
# @variable nickanderson:inventory_sudoers._users_list_var defines the name of the variable expected to hold use set of users to evaluate for sudo access
# @variable nickanderson:inventory_sudoers._users The default variable to use when evaluating sudo access which defaults to the list of users from /etc/passwd
# @variable nickanderson:inventory_sudoers._refresh_frequency_min How long to wait before clearing cache and re-evaluating which users have sudo access
{
  vars:
      "_users_list_var"
        string => "$(this.namespace):$(this.bundle)._users",
        unless => isvariable( _users_var ); # Default to _users variable for users to consider

      "_users"
        slist => getindices( data_readstringarray( "/etc/passwd", "", ":", inf, inf )),
        unless => isvariable( _users );

      "_refresh_frequency_min"
        string => "30",
        unless => isvariable( _refresh_frequency );

  methods:
      "Inventory Sudoers"
        if => isgreaterthan( length( "$(_users_list_var)" ), 0 ),
        usebundle => _inventory_sudoers(
                                         "@($(_users_list_var))", # users (a list)
                                        #  @($(_users_list_var)), # users (a list) ERROR
                                         #"$(_users_list_var)", # users the name of a variable that is a list (but this is a string)
                                         $(_refresh_frequency_min), # refresh_frequency (a number in minutes)
                                         "" ); # No prefix, too complex for # Inventory attribute name prefix
                                               # users in the simple case.
                                               # Expected use is another bundle
                                               # where a specific set of users
                                               # has been inventoried
                                               # separately, e.g. from lastlog
                                               # or something

}

bundle agent _inventory_sudoers( candidates, refresh_frequency, inventory_prefix )
# @param users A list of users to check for sudo access
# @note Consider getting users by parsing /etc/passed, or from recently logged in users
# Example Cache: $(sys.statedir)/lastlog_users_with_sudo.module.cache
# markburgess
# nickanderson
{
  vars:
    !windows::

      "cache"
        string => "$(sys.statedir)/$(with)_users_with_sudo.module.cache.d",
        with => canonify( $(inventory_prefix) );

      "users"
        slist => lsdir( "$(cache)/", "(?!\.|\.\.).*", false ),
        if => isdir( $(cache) );

      "sudo[$(users)]"
        string => "$(users)",
        meta => { "inventory", "attribute_name=$(inventory_prefix)Users with sudo" };

  files:

      "$(cache)/.*"
        handle => "$(this.namespace)_$(this.bundle)_purge_inventory_sudoers_cache",
        delete => default:tidy,
        action => default:if_elapsed( $(refresh_frequency) ),
        classes => persistent_results( "30", "$(this.namespace)_$(this.bundle)_sudoers_cache_purged" ),
        unless => "$(this.namespace)_$(this.bundle)_sudoers_cache_purged_repaired";

      "$(cache)/."
        create => "true";

      # We have a file semaphore for each user who has sudo access
      "$(cache)/$(candidates)"
        handle => "$(this.namespace)_$(this.bundle)_inventory_user_with_sudo_access_$(candidates)",
        create => "true",
        touch => "true",
        if => regcmp( ".*User $(candidates) may run.*",
                      execresult( "/usr/bin/sudo -l -U $(candidates)", noshell)),
        action => default:if_elapsed( $(refresh_frequency) ); # Weak guard, based on promise locking, -K will bypass


      # Watch out, unknown users need special handling
      # If we iterate over known users this isn't likely to be an issue.
      # If we base it off lastlog or last information, then possibly well have
      # an entry for a user that no longer exists.

      # "$(users) doesn't have sudo access"
      #   if => regcmp( "(User $(users) is not allowed.*)|(.*unknown user.*)",
      #                 execresult( "/usr/bin/sudo -l -U $(users) 2>&1", useshell));
}

body classes persistent_results( _class_persist_min, _class_prefix )
# @brief Define namespace scoped classes for all outcomes like default:results with persistence.
# @param _class_persist_min The number of minutes a class should persist for after first being defined
{
  inherit_from => default:results( "namespace", "$(_class_prefix)" );
  persist_time => "$(_class_persist_min)";
  timer_policy => "absolute";
}

bundle agent __main__
{
  methods:
      "Inventory Local users who are sudoers"
        usebundle => nickanderson:_inventory_sudoers_main;
}
